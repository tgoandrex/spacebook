generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               Int           @id @default(autoincrement())
  fname            String?       @map(name: "first_name") @db.VarChar(20)
  lname            String?       @map(name: "last_name") @db.VarChar(20)
  username         String        @unique @db.VarChar(20)
  password         String        @db.VarChar(50)
  role             String        @default("User")
  createdAt        DateTime      @default(now()) @map(name: "created_at")
  posts            Post[]
  photos           Photo[]
  comments         Comment[]
  submittedReports Report[]
  followedBy       Follow[]      @relation("follower")
  following        Follow[]      @relation("following")
  postlikes        PostLike[]    @relation("user")
  photoLikes       PhotoLike[]   @relation("user")
  commentLikes     CommentLike[] @relation("user")

  @@map(name: "users")
}

model Follow {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  Int      @map(name: "follower_id")
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int      @map(name: "following_id")
  createdAt   DateTime @default(now()) @map(name: "created_at")

  @@id([followerId, followingId])
  @@map(name: "follows")
}

model Post {
  id             Int        @id @default(autoincrement())
  content        String     @db.VarChar(500)
  author         User       @relation(fields: [authorUsername], references: [username])
  authorUsername String     @map(name: "author_username")
  comments       Comment[]
  reports        Report[]
  likes          PostLike[] @relation("post")
  createdAt      DateTime   @default(now()) @map(name: "created_at")
  @@map(name: "posts")
}

model PostLike {
  user      User     @relation("user", fields: [userId], references: [id])
  userId    Int      @map(name: "user_id")
  post      Post     @relation("post", fields: [postId], references: [id])
  postId    Int      @map(name: "post_id")
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@id([userId, postId])
  @@map(name: "post_likes")
}

model Photo {
  id             Int         @id @default(autoincrement())
  url            String
  content        String      @db.VarChar(500)
  author         User        @relation(fields: [authorUsername], references: [username])
  authorUsername String      @map(name: "author_username")
  comments       Comment[]
  reports        Report[]
  likes          PhotoLike[] @relation("photo")
  createdAt      DateTime    @default(now()) @map(name: "created_at")
  @@map(name: "photos")
}

model PhotoLike {
  user      User     @relation("user", fields: [userId], references: [id])
  userId    Int      @map(name: "user_id")
  photo     Photo    @relation("photo", fields: [photoId], references: [id])
  photoId   Int      @map(name: "photo_id")
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@id([userId, photoId])
  @@map(name: "photo_likes")
}

model Comment {
  id             Int           @id @default(autoincrement())
  content        String        @db.VarChar(300)
  post           Post?         @relation(fields: [postId], references: [id])
  postId         Int?          @map(name: "post_id")
  photo          Photo?        @relation(fields: [photoId], references: [id])
  photoId        Int?          @map(name: "photo_id")
  author         User          @relation(fields: [authorUsername], references: [username])
  authorUsername String        @map(name: "author_username")
  likes          CommentLike[] @relation("comment")
  reports        Report[]
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  @@map(name: "comments")
}

model CommentLike {
  user      User     @relation("user", fields: [userId], references: [id])
  userId    Int      @map(name: "user_id")
  Comment   Comment  @relation("comment", fields: [commentId], references: [id])
  commentId Int      @map(name: "comment_id")
  createdAt DateTime @default(now()) @map(name: "created_at")

  @@id([userId, commentId])
  @@map(name: "comment_likes")
}

model Report {
  id               Int      @id @default(autoincrement())
  type             String
  reporterMessage  String   @map(name: "reporter_message") @db.VarChar(300)
  post             Post?    @relation(fields: [postId], references: [id])
  postId           Int?     @map(name: "post_id")
  photo            Photo?   @relation(fields: [photoId], references: [id])
  photoId          Int?     @map(name: "photo_id")
  comment          Comment? @relation(fields: [commentId], references: [id])
  commentId        Int?     @map(name: "comment_id")
  resolved         Boolean  @default(false)
  adminAction      String?  @map(name: "admin_action") @db.VarChar(300)
  reporter         User     @relation(fields: [reporterUsername], references: [username])
  reporterUsername String   @map(name: "reporter_username")
  createdAt        DateTime @default(now()) @map(name: "created_at")
  @@map(name: "reports")
}